"use client";

import {
  Card,
  CardHeader,
  CardBody,
  Button,
  Input,
  Image,
  Tab,
  Tabs,
  Chip,
  Divider,
} from "@heroui/react";
import { CreditCard, TicketPercent } from "lucide-react";
import { useState } from "react";

import Forward from "@/components/forward";
import { siteConfig } from "@/config/site";
import { useCart } from "@/hooks/useCart";

const formatVND = (value: number) =>
  new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
    minimumFractionDigits: 0,
  }).format(value);

export default function MyCartContainer() {
  const { data, isLoading, error } = useCart();

  // local state l∆∞u m√£ gi·∫£m gi√° cho t·ª´ng cart item
  const [discountCodes, setDiscountCodes] = useState<Record<number, string>>(
    {},
  );

  const handleDiscountCodeChange = (cartItemId: number, code: string) => {
    setDiscountCodes((prev) => ({
      ...prev,
      [cartItemId]: code,
    }));
  };

  const totalPrice = data?.cart_items.reduce(
    (sum, item) => sum + parseFloat(item.final_price) * item.quantity,
    0,
  );

  return (
    <div>
      <div className="mb-7 flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
        <Forward href={siteConfig.routes.home} label="Quay l·∫°i trang ch·ªß" />
        <h1 className="text-3xl font-bold">Gi·ªè h√†ng c·ªßa t√¥i</h1>
      </div>

      <div className="flex flex-col gap-6 lg:flex-row">
        {/* C·ªôt tr√°i */}
        <div className="flex-[2_1_0%] space-y-6">
          <Card>
            <CardHeader>
              <h2 className="text-xl font-semibold">Ph∆∞∆°ng th·ª©c giao h√†ng</h2>
            </CardHeader>
            <CardBody>
              <Tabs aria-label="Ph∆∞∆°ng th·ª©c giao h√†ng" variant="bordered">
                <Tab key="delivery" title="Giao h√†ng">
                  <Input
                    className="mb-4"
                    placeholder="ƒê·ªãa ch·ªâ giao h√†ng c·ªßa b·∫°n"
                    size="lg"
                  />
                  <div className="space-y-4 text-base">
                    <Chip color="success" variant="faded">
                      üìç D√πng v·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n
                    </Chip>
                    {[
                      "12 Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
                      "45 L√™ Du·∫©n, Qu·∫≠n H·∫£i Ch√¢u, ƒê√† N·∫µng",
                      "89 Kim M√£, Qu·∫≠n Ba ƒê√¨nh, H√† N·ªôi",
                    ].map((address, idx) => (
                      <div key={idx} className="flex items-start gap-2">
                        <span>üîπ</span>
                        <p>{address}</p>
                      </div>
                    ))}
                  </div>
                </Tab>
                <Tab key="pickup" title="T·ª± ƒë·∫øn l·∫•y">
                  <p className="text-base italic">
                    T·ª± ƒë·∫øn l·∫•y h√†ng t·∫°i c·ª≠a h√†ng s·∫Ω gi√∫p b·∫°n ti·∫øt ki·ªám ph√≠ v·∫≠n
                    chuy·ªÉn.
                  </p>
                </Tab>
              </Tabs>
            </CardBody>
          </Card>

          <Card>
            <CardHeader>
              <h2 className="text-xl font-semibold">Th√¥ng tin c√° nh√¢n</h2>
            </CardHeader>
            <CardBody className="space-y-2 text-base">
              <div>üë§ L√™ ƒê·∫°i An</div>
              <div>üìß ledaian22@gmail.com</div>
              <div>üìû +84 0334920373</div>
            </CardBody>
          </Card>
        </div>

        {/* C·ªôt ph·∫£i */}
        <div className="flex-[1_1_0%] space-y-6">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <h2 className="mr-2 text-xl font-semibold">T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
                <Chip color="primary" size="md" variant="flat">
                  {data?.cart_items.length ?? 0}
                </Chip>
              </div>
            </CardHeader>

            <CardBody className="space-y-5 text-base">
              {isLoading && <p>ƒêang t·∫£i gi·ªè h√†ng...</p>}
              {error && <p className="text-red-500">{error.message}</p>}

              {data?.cart_items.map((item) => (
                <div
                  key={item.cart_item_id}
                  className="rounded-lg border border-zinc-700 p-4 space-y-3 bg-zinc-900"
                >
                  <div className="flex items-start gap-4">
                    <Image
                      alt={item.product_name}
                      className="rounded-lg object-cover"
                      height={100}
                      src={item.thumbnail}
                      width={100}
                    />
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="text-base font-semibold">
                            {item.product_name}
                          </p>
                          <p className="text-sm text-zinc-400">
                            S·ªë l∆∞·ª£ng: x{item.quantity}
                          </p>
                        </div>
                        <div className="text-right text-base font-semibold whitespace-nowrap">
                          {formatVND(
                            parseFloat(item.final_price) * item.quantity,
                          )}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="pt-2">
                    <Input
                      className="w-full"
                      placeholder="M√£ gi·∫£m gi√° cho s·∫£n ph·∫©m n√†y"
                      size="md"
                      startContent={<TicketPercent />}
                      value={discountCodes[item.cart_item_id] || ""}
                      variant="bordered"
                      onChange={(e) =>
                        handleDiscountCodeChange(
                          item.cart_item_id,
                          e.target.value,
                        )
                      }
                    />
                  </div>
                </div>
              ))}

              <Divider className="my-4" />

              <div className="border-t pt-4 space-y-2 text-base">
                <div className="flex justify-between">
                  <span>T·∫°m t√≠nh</span>
                  <span>{formatVND(totalPrice ?? 0)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Thu·∫ø (10%)</span>
                  <span>{formatVND((totalPrice ?? 0) * 0.1)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Ph√≠ v·∫≠n chuy·ªÉn</span>
                  <span>{formatVND(30000)}</span>
                </div>
                <div className="flex justify-between font-bold text-xl pt-2">
                  <span>T·ªïng c·ªông</span>
                  <span>{formatVND((totalPrice ?? 0) * 1.1 + 30000)}</span>
                </div>
              </div>

              <Button
                fullWidth
                className="mt-4 text-base"
                color="primary"
                size="lg"
                startContent={<CreditCard />}
              >
                Thanh to√°n {formatVND((totalPrice ?? 0) * 1.1 + 30000)}
              </Button>
            </CardBody>
          </Card>
        </div>
      </div>
    </div>
  );
}
